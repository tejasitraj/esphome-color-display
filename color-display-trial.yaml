substitutions: #substitute your own values in this section
  device_name: color-display-trial
  device_description: "Render text on an ILI9341 TFT display"
  static_ip: 192.168.1.254
  gateway: 192.168.1.1
  subnet: 255.255.255.0
  internal_temp_sensor: sensor.air_quality_meter_temperature #entity from Home Assistant
  outside_temp_sensor: sensor.outside_temperature #entity from Home Assistant
  weather_entity: weather.smhi_home #entity from Home Assistant
  todays_forecast_high_entity: sensor.todays_forecast_high #entity from Home Assistant
  todays_forecast_low_entity: sensor.todays_forecast_low #entity from Home Assistant
  todays_forecast_condition_entity: sensor.todays_forecast_condition
  tomorrows_forecast_high_entity: sensor.tomorrows_forecast_high
  tomorrows_forecast_low_entity: sensor.tomorrows_forecast_low
  tomorrows_forecast_condition_entity: sensor.tomorrows_forecast_condition

#---------------------------------------------------------------------------------------------

esphome:
  name: '${device_name}'
  comment: '${device_description}'
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: $static_ip
    gateway: $gateway
    subnet: $subnet
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${device_name}'
    password: !secret fallback_password

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret esphome_api_password

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret esphome_web_username
    password: !secret esphome_web_password

time:
  - platform: homeassistant
    id: esptime

binary_sensor:
  - platform: status
    name: "Display Status"

sensor:
  - platform: homeassistant
    id: inside_temperature
    entity_id: $internal_temp_sensor
    internal: true

  - platform: homeassistant
    id: outside_temperature
    entity_id: $outside_temp_sensor
    internal: true
    
  - platform: homeassistant
    id: todays_forecast_high
    entity_id: $todays_forecast_high_entity
    internal: true
  
  - platform: homeassistant
    id: todays_forecast_low
    entity_id: $todays_forecast_low_entity
    internal: true
  
  - platform: homeassistant
    id: tomorrows_forecast_high
    entity_id: $tomorrows_forecast_high_entity
    internal: true
  
  - platform: homeassistant
    id: tomorrows_forecast_low
    entity_id: $tomorrows_forecast_low_entity
    internal: true

text_sensor:
  - platform: homeassistant
    id: weather_state
    name: "Current Weather Icon"
    entity_id: $weather_entity
    internal: true
  
  - platform: homeassistant
    id: tomorrows_forecast_condition
    entity_id: $tomorrows_forecast_condition_entity
    internal: true
  
  - platform: homeassistant
    id: todays_forecast_condition
    entity_id: $todays_forecast_condition_entity
    internal: true

font:
  - file: 'SourceSansPro-Light.ttf'
    id: font1
    size: 14
  - file: 'SourceSansPro-SemiBold.ttf'
    id: font2
    size: 26
  - file: 'materialdesignicons-webfont.ttf'
    id: font3
    size: 35
    glyphs:
      - "\U000F0F55" #mdi:home-thermometer-outline
  - file: 'materialdesignicons-webfont.ttf'
    id: font4
    size: 70
    glyphs:
      - "\U000F0594" #"clear-night"
      - "\U000F0590" #"cloudy"
      - "\U000F0591" #"fog"
      - "\U000F0592" #"hail"
      - "\U000F0593" #"lightning"
      - "\U000F067E" #"lightning-rainy"
      - "\U000F0595" #"partlycloudy"
      - "\U000F0596" #"pouring"
      - "\U000F0597" #"rainy"
      - "\U000F0598" #"snowy"
      - "\U000F067F" #"snowy-rainy"
      - "\U000F0599" #"sunny"
      - "\U000F059D" #"windy"
      - "\U000F059E" #"windy-variant"
  - file: 'SourceSansPro-Bold.ttf'
    id: font5
    size: 60

color:
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_background
    red: 60%
    green: 20%
    blue: 80%
  - id: my_golden
    red: 93%
    green: 80%
    blue: 38%
    
    
spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

output:
  - platform: ledc
    pin: GPIO32
    id: gpio_32_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: GPIO26
    dc_pin: GPIO25
    led_pin: GPIO32  ### see note below ###
    reset_pin: GPIO33
    rotation: 90°

    lambda: |-
      it.filled_rectangle(0,  0, it.get_width(), it.get_height(), id(my_background));
      it.strftime(10, 10, id(font2), id(my_white), TextAlign::TOP_LEFT, "%A %d %b", id(esptime).now());
      // Print time in HH:MM format
      it.strftime(10, 40, id(font5), id(my_white), TextAlign::TOP_LEFT, "%H:%M", id(esptime).now());
      
      std::map<std::string, std::string> weather_icon_map
        {
          {"clear-night", "\U000F0594"},
          {"cloudy", "\U000F0590"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"partlycloudy", "\U000F0595"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };
      
      if (id(weather_state).has_state()) {
        it.printf(220, 15, id(font4), id(my_golden), TextAlign::TOP_LEFT, weather_icon_map[id(weather_state).state.c_str()].c_str());
      }
      if (id(outside_temperature).has_state()) {
        it.printf(215, 80, id(font2), id(my_golden), TextAlign::TOP_LEFT, "%7.1f°", id(outside_temperature).state);
      }
      
      auto time = id(esptime).now();
      if (time.hour > 16) {
        it.printf(175, 135, id(font1), id(my_white), TextAlign::TOP_LEFT, "Tomorrows Forecast:");
        if (id(tomorrows_forecast_condition).has_state()) {
          it.printf(175, 155, id(font4), id(my_white), TextAlign::TOP_LEFT, weather_icon_map[id(tomorrows_forecast_condition).state.c_str()].c_str());
        }
        if (id(tomorrows_forecast_high).has_state()) {
          it.printf(230, 160, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(tomorrows_forecast_high).state);
        }
        if (id(tomorrows_forecast_low).has_state()) {
          it.printf(230, 190, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(tomorrows_forecast_low).state);
        }
      } else {
        it.printf(175, 135, id(font1), id(my_white), TextAlign::TOP_LEFT, "Todays Forecast:");
        if (id(todays_forecast_condition).has_state()) {
          it.printf(175, 155, id(font4), id(my_white), TextAlign::TOP_LEFT, weather_icon_map[id(todays_forecast_condition).state.c_str()].c_str());
        }
        if (id(todays_forecast_high).has_state()) {
          it.printf(230, 160, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(todays_forecast_high).state);
        }
        if (id(todays_forecast_low).has_state()) {
          it.printf(230, 190, id(font2), id(my_white), TextAlign::TOP_LEFT, "%7.1f°", id(todays_forecast_low).state);
        }
      }
      it.printf(65, 135, id(font3), id(my_golden), TextAlign::TOP_LEFT, "\U000F0F55");
      if (id(inside_temperature).has_state()) {
        it.printf(40, 165, id(font2), id(my_golden), TextAlign::TOP_LEFT, "%7.1f°", id(inside_temperature).state);
      }